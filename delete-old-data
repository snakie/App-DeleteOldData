#!/usr/bin/env perl

use FindBin;
# add local lib directory
use lib "$FindBin::Bin/lib";
use Getopt::Long qw(:config no_ignore_case);

use App::DeleteOldData;

=item
Prints script usage
=cut

sub usage() {
    print <<USAGE;
Usage: $0 [options] <path>

Deletes all data in an hourly partitioned hierarchy older than
some number of days.  <path> is the base location of the hourly
partitioned data.

Options:
  -h --help                      Show this help message and exit.
  -d --older-than-days=<days>    Drop data older than this number of days.
                                 [default: 10]
  -D --dataset-name=<name>       Only delete data for this dataset name.
                                 If this is not given, all datasets will be
                                 pruned of old data.
  -n --dry-run                   Don't actually do anything, just output the
                                 directories that would have data deleted.
USAGE
}

=item
Main driver function
=cut

sub main() {
    my ($help,$dryrun,$older_than_days,$dataset_name,$base_path);
    $older_than_days = 10;
    unless(GetOptions("help" => \$help,
               "dry-run|n" => \$dryrun,
               "older-than-days|d=i" => \$older_than_days, #default value 10
               "dataset-name|D=s" => \$dataset_name,
           )) {
        usage(); # bad options
        return 1;
    }
    if($help) {
        usage();
        return 0;
    }
    if($ARGV != 1) {
        print "a single <path> argument must be provided after options\n";
        usage();
        return 1;
    }
    my $deleter = App::DeleteOldData->new(
                    dryrun => $dryrun,
                    older_than_days => $older_than_days,
                    dataset_name => $dataset_name,
                    base_path => $ARGV[0];
                  ); 
    return $deleter->process_deletes();
}

my $rc = main();
exit $rc;
